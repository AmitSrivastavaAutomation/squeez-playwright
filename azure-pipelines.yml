trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  NODE_VERSION: '20.x'
  WORKDIR: '$(System.DefaultWorkingDirectory)'
  PW_BROWSERS_CACHE_DIR: '$(Pipeline.Workspace)/.pw-browsers'
  NPM_CACHE_DIR: '$(Pipeline.Workspace)/.npm'

steps:
# 0) Checkout
- checkout: self
  fetchDepth: 0
  submodules: recursive
  clean: true

# 0.1) Quick tree
- script: |
    echo "==== GIT COMMIT ===="
    git rev-parse HEAD
    echo "==== TREE ===="
    ls -la
  workingDirectory: '$(WORKDIR)'
  displayName: 'Verify checkout (commit + files)'

# 1) Node
- task: NodeTool@0
  inputs:
    versionSpec: '$(NODE_VERSION)'
  displayName: 'Use Node.js $(NODE_VERSION)'

# 2) Cache npm
- task: Cache@2
  displayName: 'Restore npm cache'
  inputs:
    key: 'npm|$(Agent.OS)|$(Build.SourcesDirectory)/package-lock.json'
    restoreKeys: |
      npm|$(Agent.OS)
    path: '$(NPM_CACHE_DIR)'

# Install deps (and ensure Allure CLI is available)
- script: |
    npm config set cache "$(NPM_CACHE_DIR)" --global
    npm ci
    # Ensure the correct Allure CLI is available (v2)
    npx --yes allure-commandline@latest --version
  workingDirectory: '$(WORKDIR)'
  displayName: 'Install npm dependencies (+ verify Allure)'

# 3) Cache Playwright browsers
- task: Cache@2
  displayName: 'Restore Playwright browsers cache'
  inputs:
    key: 'pw-browsers|$(Agent.OS)|$(Build.SourcesDirectory)/package-lock.json'
    path: '$(PW_BROWSERS_CACHE_DIR)'

- script: |
    export PLAYWRIGHT_BROWSERS_PATH="$(PW_BROWSERS_CACHE_DIR)"
    echo "PLAYWRIGHT_BROWSERS_PATH=$PLAYWRIGHT_BROWSERS_PATH"
    if [ ! -d "$(PW_BROWSERS_CACHE_DIR)" ] || [ -z "$(ls -A "$(PW_BROWSERS_CACHE_DIR)" 2>/dev/null)" ]; then
      echo "No cached browsers found. Installing..."
      npx playwright install --with-deps
    else
      echo "Browsers found in cache. Skipping install."
    fi
  workingDirectory: '$(WORKDIR)'
  displayName: 'Ensure Playwright browsers are available'

# 4) Run tests => Allure results only
- script: |
    export PLAYWRIGHT_BROWSERS_PATH="$(PW_BROWSERS_CACHE_DIR)"
    echo "Running Playwright tests with Allure reporter..."
    npx playwright test --reporter=line,allure-playwright
  workingDirectory: '$(WORKDIR)'
  displayName: 'Run Playwright Tests (Allure)'

# 5) Generate Allure HTML report (guarded if no results)
- script: |
    echo "Generating Allure report from ./allure-results..."
    if [ -d "./allure-results" ] && [ "$(ls -A ./allure-results 2>/dev/null)" ]; then
      npx allure-commandline --version
      npx allure-commandline generate ./allure-results --clean -o allure-report
    else
      echo "No allure-results found; skipping report generation."
      mkdir -p allure-report && echo "<h3>No Allure results found</h3>" > allure-report/index.html
    fi
  workingDirectory: '$(WORKDIR)'
  condition: always()
  displayName: 'Generate Allure HTML report'

# 6) Publish HTML report (Build Artifact)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(WORKDIR)/allure-report'
    ArtifactName: 'allure-report'
  condition: always()
  displayName: 'Publish Allure HTML Report'

# 6a) Also publish as Pipeline Artifact (shows in run header)
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(WORKDIR)/allure-report'
    artifact: 'allure-report'
    publishLocation: 'pipeline'
  condition: always()
  displayName: 'Publish Allure HTML (Pipeline Artifact)'

# 6b) Zip the report for easy download
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(WORKDIR)/allure-report'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/allure-report.zip'
    replaceExistingArchive: true
  condition: always()
  displayName: 'Zip Allure report'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/allure-report.zip'
    ArtifactName: 'allure-report-zip'
  condition: always()
  displayName: 'Publish zipped Allure report'

# 6c) (Optional) Publish raw Allure results too
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(WORKDIR)/allure-results'
    ArtifactName: 'allure-results'
  condition: always()
  displayName: 'Publish raw Allure results'

# 7) Add a clickable link in the Build Summary
- script: |
    SUMMARY_FILE="$(Build.SourcesDirectory)/AllureReportSummary.md"
    ARTIFACT_URL="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&type=publishedArtifacts"
    echo "### ðŸ“Š Allure Report" > "$SUMMARY_FILE"
    echo "" >> "$SUMMARY_FILE"
    echo "The Allure HTML report has been published as build and pipeline artifacts." >> "$SUMMARY_FILE"
    echo "" >> "$SUMMARY_FILE"
    echo "- **Open artifacts:** [$ARTIFACT_URL]($ARTIFACT_URL)" >> "$SUMMARY_FILE"
    echo "- **Artifact names:** \`allure-report\`, \`allure-report-zip\`, \`allure-results\`" >> "$SUMMARY_FILE"
    echo "" >> "$SUMMARY_FILE"
    echo "Download the artifact and open \`index.html\` via a local server (not file://) to view the full Allure report." >> "$SUMMARY_FILE"
    echo "##vso[task.addattachment type=Distributedtask.Core.Summary;name=Allure Report;]$SUMMARY_FILE"
  displayName: 'Add Allure link to Build Summary'
  condition: always()
